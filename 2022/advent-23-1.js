let input = `#.#..#...#..##.#..##.##.###.#..#...#.############.###.####.....##.#.......
...#..#..##......#.......###.#..##.#.#.#...#..#.#.#.#...###.#..#...#.....#
##..###..##.####....##.#...#....##.....#.##..#####..##..###.#.#.#.##......
.#.#.##.#..##....#..#...#.#.##.#...##.##.##....#...####..#.###..#.#..##.#.
##..##.##..#.#####..#..#####..##.###.##.#..#.#....#.#.##.###..#####.#...##
.#..#.#.##.....##.#.####...##.#.......##.#.#.######.#....#####.#####..#..#
##....#...##.#.....##..#.#...######.#..#.##.###..###.#.##.##.#..#....#..##
.#.###..###.##.#...#.#.##.#.#...#####.##.#.##.######..######.##...###.##..
#.#..##....#....#..####.#..###.#...#.#.########.#....#..#...#.#..#..####..
....#.#.##..#.#######...##...##.#..#.#.###.###...##...##.#...##...#.#####.
....#.####..#......#..#....#..###...#.#....#.##...#.#....#####..#..#.#...#
#......#..#######..#...####...#.#.##.#..###.....#.#.####.#.#.#.##.##.##.##
.###.....##..###..####.##..###....#..#...###..##..##..#.####.##.#......###
###...#.........#.#.....####....##.###.####.###.#....##.#..#.#..##...#..##
..#.#.#####.#..#.#.######.#####....#.#...#..#.##..#..#.#..##..#..##.###...
##.#####.##.#...#.#.#...#...#..........#.#.#..####.#...##.######..###...##
..#.#.####..##..#.#..#####.#.##..#..#.##....###.##.##..#.#...##.##..##.##.
###..#.######.##...##.##.####....#.##.#.#.#...#..#....##..####..##.#.#.##.
.##.##.###.....####..###....#.#..##..#.#..#..##..#.##.##...##..#.#.#..###.
....#.####...######.....########.#.#....##.#..###..#.###..###.#..#.#....##
.#..###.#.#.#.#.#..#...####.#.#.##....#..#...#....##.....####...####.#.###
#.##...###.#####.##.###.#....##..#.....##..#...#..##.#...#..##...##.#.##.#
...#..####..##....###......######.#.#.#..#######...##.#..####.....#.#.####
...#.####....###.##.#.#.#..##..#...#.##.#...#.###..#..#....###.##.....#..#
#..#.#.##...#......##.##..#..####..##..###.###.#.###.##....#....###.##..#.
.#..#..####.#.#.###.###.####.#....#.####....#.##.##....#......#.####.##..#
...####.#...#.#....#.#......#.#.#..##.##.##....##...##......##.####.##....
.....#..#.##.##..#..##...###..#..#.#...####.#.##...##.#####.#..#..#..#####
..##.#...###....#...##.#.#.......#....####..##........#...#..###..#..###..
####...###...#....####.##...##.####..##.##...#####.####..###..##.##.#.###.
...........###....#....#...#..##..###...#..#.#..#.#.#....####.#.#..####...
.#.##.###.#.##..##..######.####....#.####...#..#...#..##..######.#.##.####
.###..#.#..##..##...#...#...####.....##..#..##.#..##....#...#..##.#..#.#..
.#.###.#...##..#..#..###...#.##.#.#.....#.#.#...#...##.#.##.#...##....#..#
.##.##..#.#.#..#.#######.###..###.#.#####..#.###.####..###...#.#.##....#..
.....###.####.#####.###....##.##.##.##...###.#.#.#...####...###....#...###
##.....#..#....#.###..##...##.#.#..###.#.#..###.#####.##.##.##.#...###.##.
.#..#.#####....#.#.#.#..#.####...#...#..###..##.######..#.#..####..##.##..
.#....#..#....#.##.#.#.##..#.#..###..##..##..###..#.#######..####..###.#..
#.#.##.##.#.##.##..#...#..###..###.#.....#.###.#..####.#..#####...###.#.#.
...#.#.##..#.#...#.#..#..####.#...###....#.....#.....#.##.####.#...####.##
##.###.##..#..##.###.#..#..#.###.###.##.##...#.#..####....##.#####...#.#.#
###.....#.#.##.#...#.#...##.##.#..####.##...#.#.#####....#..#####...#.#.#.
##.######.#.#....#....#.#####.....####....###.#.#...##.#..#.##.#.##..##.#.
##...##.##.#..#.#......#.####..###..###..#....###..#..#########..#.###.#..
#.#..###..#...#.#.#####.#.##..#..#.#.#.#..#.##.####.####..#.#..##.##.####.
###########.#..###..#.##.###.#.#.#.#..##.##...#...###..##..###.##...##.#.#
..#.##..###....#.#..#.......#.##..##.######..#####.##.##........##....#...
.#..#.##.#..#......##.#..##.#.##.###..###.#....##..###.#.#.#...#.##.#...##
#####..##..##.#..###...##.#...#.##.#..#....##..#..#...#.#...##.###...#.#.#
#.#.#.....###.#.#.##.......#....#.####.########..#.##.##...#.#.#....##....
.###.#...###..#####..##..#.#.##.####.###.#....##.#..##..#...#.....#####.#.
#####.#..#.###...##.#..##.##...####...####..###...###......#..#.#.......##
###....#.##.#.#.#.####.##.###...##.#.#...#..#.....#.##########...########.
###...###.#..#....#.#.#...#...#...#.#####...##..#.....##..##...#.#.#.##.#.
##.##.#..###....#..#.#.#####...##....#....#...###....#..#..#.#.#...##..###
...#..##..###..#.####..#.#.#....##.##.#.#...#....###...#.##......##.#.###.
.#.######.#######..#..#.#..##..#..#.##.#...####..##########..#.##..#.#.###
.#.#...#..##.#...#..##.#..##......#.###.###.#.##.###...#....#...########.#
.##.#....#..#.#.##..#.#####...##.#.##.##..#.#.##.##.#.#...#.#...#....##.##
..##.###.###...#...##...#.##..###.....##.#.####.###.......#....##.##.##...
.####.#.###.##.#...###.#######..#.....###..#..##.#..##......#..##.##..###.
##..#.#####.##...##..###.######..#.#.##...##.#.#.##.#..#....###.##..#..###
.###....###...#...#...#.#..###.#.##..###.#...##..#..#...##...##....#.####.
.##.#.#.##..#.#.#..#..####...###.##..##.##..###..#####..###...#.#.########
.##..##..##....#....#.#.#.##.#....#....#..###.####.##..##...#.##..##.....#
..#.###..#.##..#..#.##.######.#.###.#..##.....#####.#########..##...#..#.#
#.####...#..#..#.###..##.#.#...#....##.#####.#..#...##..##.#..#..###....#.
##...#....#######.###.###..#.##....####.#.#...#.#.#...####..#.#..#.###.#..
##.#.####..###.###.###...#..#.#..#..#....##..#..###.#...#.#.#..#.##.##.##.
##....#..#..#.#.##.##.#...#...#####....##..#..####.#.#..#...###.###..###..
#.#.#.##......#..#..##...#.....##.##..####..###....#.#..#...####..#.##....
.#.###.#..#.#..#..###.....##.#.#.##....##...##.#.#.##.#.#..##..##..#......
###...##.###..#.##.#.#..#.##..##.#...##..###.#........#.#.#...#.#.#.#.....`;

input = input.split("\n").map((str) => str.split(""));

const n = input.length + 20;
const m = input[0].length + 20;

let startDir = 0;

function Elf(id, x, y) {
  this.id = id;
  this.x = x;
  this.y = y;
}

let board = [];
for (let i = 0; i < n; i++) board.push(Array(m).fill(null));

let elves = [];

for (let i = 0; i < input.length; i++)
  for (let j = 0; j < input[i].length; j++)
    if (input[i][j] === "#") {
      let elf = new Elf(elves.length, j + 10, i + 10);
      board[i + 10][j + 10] = elf;
      elves.push(elf);
    }

function startRound() {
  function neighborElfExists(elf) {
    let { x, y } = elf;
    return (
      board[y - 1][x] ||
      board[y + 1][x] ||
      board[y][x - 1] ||
      board[y][x + 1] ||
      board[y - 1][x - 1] ||
      board[y + 1][x + 1] ||
      board[y - 1][x + 1] ||
      board[y + 1][x - 1]
    );
  }

  function getProposal(elf) {
    let { id, x, y } = elf;
    switch (startDir) {
      // north
      case 0:
        if (!board[y - 1][x - 1] && !board[y - 1][x] && !board[y - 1][x + 1])
          return [id, x, y - 1];
      // south
      case 1:
        if (!board[y + 1][x - 1] && !board[y + 1][x] && !board[y + 1][x + 1])
          return [id, x, y + 1];
      // west
      case 2:
        if (!board[y - 1][x - 1] && !board[y][x - 1] && !board[y + 1][x - 1])
          return [id, x - 1, y];
      // east
      case 3:
        if (!board[y - 1][x + 1] && !board[y][x + 1] && !board[y + 1][x + 1])
          return [id, x + 1, y];
      // north
      case 0:
        if (!board[y - 1][x - 1] && !board[y - 1][x] && !board[y - 1][x + 1])
          return [id, x, y - 1];
      // south
      case 1:
        if (!board[y + 1][x - 1] && !board[y + 1][x] && !board[y + 1][x + 1])
          return [id, x, y + 1];
      // west
      case 2:
        if (!board[y - 1][x - 1] && !board[y][x - 1] && !board[y + 1][x - 1])
          return [id, x - 1, y];
      // east
      case 3:
        if (!board[y - 1][x + 1] && !board[y][x + 1] && !board[y + 1][x + 1])
          return [id, x + 1, y];
        return false;
    }
  }

  function getMoves() {
    let proposals = {};
    for (let elf of elves) {
      if (!neighborElfExists(elf)) continue;
      let proposal = getProposal(elf);
      if (!proposal) continue;
      let [, x2, y2] = proposal;
      let str = x2 + "," + y2;
      if (proposals[str] === undefined) proposals[str] = proposal;
      else proposals[str] = null;
    }
    return proposals;
  }

  let moves = getMoves();
  for (const str in moves)
    if (!moves[str]) continue;
    else {
      let [id, x2, y2] = moves[str];
      let elf = elves[id];
      board[elf.y][elf.x] = null;
      elf.x = x2;
      elf.y = y2;
      board[elf.y][elf.x] = elf;
    }

  startDir = (startDir + 1) % 4;
}

for (let i = 0; i < 10; i++) startRound();

let minX = Infinity;
let minY = Infinity;
let maxX = -Infinity;
let maxY = -Infinity;

for (const elf of elves) {
  minX = Math.min(minX, elf.x);
  minY = Math.min(minY, elf.y);
  maxX = Math.max(maxX, elf.x);
  maxY = Math.max(maxY, elf.y);
}

let output = (maxX - minX + 1) * (maxY - minY + 1) - elves.length;
console.log(output);
